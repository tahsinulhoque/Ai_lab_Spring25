 Write a Program to implement Uninformed Search Technique: Depth First Search. 

This code is doing in Google colab where data set is fetch_california_housing(). 



from sklearn.datasets import fetch_california_housing
import pandas as pd
import networkx as nx
import numpy as np
import random
import matplotlib.pyplot as plt
from collections import deque

data = fetch_california_housing()
df = pd.DataFrame(data.data, columns=data.feature_names)
df['Price'] = data.target

print(df.head())


import random
df = df.sample(n=1000, random_state=42).reset_index(drop=True)
print(f"Reduced dataset size: {df.shape[0]} houses")

G = nx.Graph()

for i in range(len(df)):
    G.add_node(i, price=df.loc[i, 'Price'], lat=df.loc[i, 'Latitude'], lon=df.loc[i,
'Longitude'])
threshold = 0.05
G = nx.Graph()

for i in range(len(df)):
    G.add_node(i, price=df.loc[i, 'Price'], lat=df.loc[i, 'Latitude'], lon=df.loc[i, 'Longitude'])
threshold = 0.05
for i in range(len(df)):
    for j in range(i + 1, len(df)):
        if abs(df.loc[i, 'Latitude'] - df.loc[j, 'Latitude']) < threshold and \
           abs(df.loc[i, 'Longitude'] - df.loc[j, 'Longitude']) < threshold:
            G.add_edge(i, j)

print(f"Number of nodes: {G.number_of_nodes()}")
print(f"Number of edges: {G.number_of_edges()}")

print(f"Number of nodes: {G.number_of_nodes()}")
print(f"Number of edges: {G.number_of_edges()}")


def dfs_search(graph, start_node, max_price):
    """ DFS to find the best house within max_price """
    visited = set()
    stack = [start_node]

    while stack:
        node = stack.pop()

        if node in visited:
            continue
        visited.add(node)

        house_price = graph.nodes[node]['price']
        if house_price <= max_price:
            return node, house_price

        for neighbor in graph.neighbors(node):
            if neighbor not in visited:
                stack.append(neighbor)

    return None
while True:
    try:
        start_house = int(input("Enter the starting house ID (0 - 999): "))
        if start_house < 0 or start_house >= 1000:
            print("Invalid house ID! Please enter a number between 0 and 999.")
            continue
        break
    except ValueError:
        print("Please enter a valid integer.")

while True:
    try:
        max_budget = float(input("Enter your maximum budget: "))
        if max_budget < 0:
            print("Budget cannot be negative. Please enter a valid amount.")
            continue
        break
    except ValueError:
        print("Please enter a valid number.")

result = dfs_search(G, start_house, max_budget)
if result:
    print(f"House found: ID {result[0]} with Price {result[1]}")
else:
    print("No suitable house found")



plt.figure(figsize=(10, 6))
pos = {i: (df.loc[i, 'Longitude'], df.loc[i, 'Latitude']) for i in
range(len(df))}
nx.draw(G, pos, node_size=10, alpha=0.6, edge_color="gray")
plt.xlabel("Longitude")
plt.ylabel("Latitude")
plt.title("California Housing DFS Graph")
plt.show()





















